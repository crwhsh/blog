<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于YOLOv6-水下垃圾检测</title>
    <url>/archives/9f6a770e.html</url>
    <content><![CDATA[<h1 id="基于YOLOv6-水下垃圾检测"><a href="#基于YOLOv6-水下垃圾检测" class="headerlink" title="基于YOLOv6-水下垃圾检测"></a>基于YOLOv6-水下垃圾检测</h1><p>记录一下第一次跑通的深度学习模型。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>此篇文章介绍基于YOLOv6 自定义数据集训练—水下垃圾检测。在谷歌硬盘中完成训练。</p>
<h2 id="为什么使用谷歌硬盘"><a href="#为什么使用谷歌硬盘" class="headerlink" title="为什么使用谷歌硬盘"></a>为什么使用谷歌硬盘</h2><p>1，谷歌硬盘的下载速度特别给力，基本上都是几十mb&#x2F;s。</p>
<p>如图的下载速度</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622015634138.png" alt="image-20230622015634138"></p>
<p>2，谷歌免费提供GPU硬件支持。</p>
<p>当然谷歌硬盘也有不足的地方，首先是访问它就有门槛，然后是免费用户最多一次性运行十二小时。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>代码来源与介绍，如果你想了解更多信息，请访问此网站。</p>
<p><a href="https://learnopencv.com/yolov6-custom-dataset-training/">YOLOv6 自定义数据集训练 – 水下垃圾检测 (learnopencv.com)</a></p>
<p>代码下载链接</p>
<p><a href="https://www.dropbox.com/scl/fo/ppvl9zhiip2oy81b84yzi/h?dl=1&rlkey=wsmw1604zqdcvg8z05pfr2ohd">https://www.dropbox.com/scl/fo/ppvl9zhiip2oy81b84yzi/h?dl=1&amp;rlkey=wsmw1604zqdcvg8z05pfr2ohd</a></p>
<h3 id="谷歌硬盘的使用"><a href="#谷歌硬盘的使用" class="headerlink" title="谷歌硬盘的使用"></a>谷歌硬盘的使用</h3><p>打开谷歌硬盘后，点击新建</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622025354188.png" alt="image-20230622025354188"></p>
<p>选择更多中的Google Colaboratory</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622025423380.png" alt="image-20230622025423380"></p>
<p>这样就生成了一个.ipynb的文件，而且有jupyter页面，你可以在这里面开始训练你的模型了！</p>
<p>创建好文件后要点击连接，这样你才能分配到资源，来跑你的代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622011634780.png" alt="image-20230622011634780"></p>
<p>这个选项可以挂载到你的谷歌硬盘上面</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622011717882.png" alt="image-20230622011717882"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>一定要先点击这个修改里面的笔记本设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622011259209.png" alt="image-20230622011259209"></p>
<p>将硬件加速改为GPU，我当时默认的是无，因此走了好多弯路</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622011410275.png" alt="image-20230622011410275"></p>
<p>注意：如果你在运行代码的时候点击了保存，那么将会断开连接，你运行的代码，可能要重新运行了。</p>
<h4 id="小经验"><a href="#小经验" class="headerlink" title="小经验"></a>小经验</h4><p>在jupyter中想运行终端命令该如何运行呢？</p>
<p>我目前接触到了两个符号</p>
<p>如果你想克隆GitHub仓库，那你需要在指令前面加上 ！如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!git clone https://github.com/meituan/YOLOv6.git</span><br></pre></td></tr></table></figure>

<p>下载其他链接也是如此比如 ! wget …..</p>
<p>还有一个符号是%</p>
<p>如果你想看你的目录下有什么文件，你可以输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%ls</span><br></pre></td></tr></table></figure>



<p>你想移动到其他文件夹，请输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%cd </span><br></pre></td></tr></table></figure>

<p>指令是Linux常见指令，不过需要在前面加上符号</p>
<h2 id="我增补后的代码介绍"><a href="#我增补后的代码介绍" class="headerlink" title="我增补后的代码介绍"></a>我增补后的代码介绍</h2><h3 id="训练前的准备"><a href="#训练前的准备" class="headerlink" title="训练前的准备"></a>训练前的准备</h3><p>我在第一次训练模型时，发现直接运行会报错，提示信息是找不到tensorflow，所以我在网上找了下载tensorflow的方法。输入以下命令，就可以下载了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!dpkg -i nv-tensorrt-repo-ubuntu1804-cuda10.0-trt5.1.2.2-rc-20190227_1-1_amd64.deb</span><br><span class="line">!apt-key add /var/nv-tensorrt-repo-cuda10.0-trt5.1.2.2-rc-20190227/7fa2af80.pub</span><br><span class="line">!apt-get update</span><br><span class="line">!apt-get install -y --no-install-recommends libnvinfer5=5.1.2-1+cuda10.0</span><br><span class="line">!apt-get install -y --no-install-recommends libnvinfer-dev=5.1.2-1+cuda10.0</span><br><span class="line">!apt-get install tensorrt</span><br><span class="line">!apt-get install python3-libnvinfer-dev</span><br><span class="line">!apt-get install uff-converter-tf</span><br></pre></td></tr></table></figure>



<p>输入这行命令，就能检验你是否安装成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!dpkg -l | grep TensorRT</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622012702954.png" alt="image-20230622012702954"></p>
<p>如何看你是否安装了torch和tensorflow呢？请输入这两个指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line">import tensorflow as tf</span><br><span class="line">tf.test.gpu_device_name()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622013525984.png" alt="image-20230622013525984"></p>
<p>如图，说明已经安装了，GPU：0，说明我们选择GPU的时候只有一个选择了，因为只有这一个GPU，而且这块GPU的代号是0，如果你有多个GPU，那么当你运行上面的代码时，会输出GPU：0，1，2类似的信息。</p>
<p>以上是我补充的代码，接下来就是<a href="https://learnopencv.com/author/sovit/">Sovit Rath</a>写好的代码了</p>
<p>我来给大家解释一下代码的作用。</p>
<p>导入必需的库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import zipfile</span><br><span class="line">import requests</span><br><span class="line">import glob</span><br><span class="line">import cv2</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import random</span><br></pre></td></tr></table></figure>



<p>生成随机种子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SEED = 100</span><br><span class="line">np.random.seed(SEED)</span><br></pre></td></tr></table></figure>



<p>移动到指定目录，这个也是我自己加的，移动到指定的目录，会是你的文件管理更加清晰，安装的文件也清晰明了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%cd /content/drive/MyDrive</span><br></pre></td></tr></table></figure>



<p>克隆YOLOv6的 GitHub仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if not os.path.exists(&#x27;YOLOv6&#x27;):</span><br><span class="line">    !git clone https://github.com/meituan/YOLOv6.git</span><br></pre></td></tr></table></figure>



<p>移动到仓库目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%cd YOLOv6</span><br></pre></td></tr></table></figure>



<p>安装YOLOv6的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



<p>下载数据集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def download_file(url, save_name):</span><br><span class="line">    url = url</span><br><span class="line">    if not os.path.exists(save_name):</span><br><span class="line">        file = requests.get(url)</span><br><span class="line">        open(save_name, &#x27;wb&#x27;).write(file.content)</span><br><span class="line"></span><br><span class="line">download_file(</span><br><span class="line">    &#x27;https://www.dropbox.com/s/lbji5ho8b1m3op1/reduced_label_yolov6.zip?dl=1&#x27;,</span><br><span class="line">    &#x27;reduced_label_yolov6.zip&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p>解压数据集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Unzip the data file.</span><br><span class="line">def unzip(zip_file=None):</span><br><span class="line">    try:</span><br><span class="line">        with zipfile.ZipFile(zip_file) as z:</span><br><span class="line">            z.extractall(&quot;./&quot;)</span><br><span class="line">            print(&quot;Extracted all&quot;)</span><br><span class="line">    except:</span><br><span class="line">        print(&quot;Invalid file&quot;)</span><br><span class="line"></span><br><span class="line">unzip(&#x27;reduced_label_yolov6.zip&#x27;)</span><br></pre></td></tr></table></figure>



<p>将配置的文件写入仓库中，这个是自定义数据集的必须操作。</p>
<p>数据集所在的位置，数据集的类别信息，比如这个有四种，分别是animal’,’plant’,’rov’,’trash’，这些信息都需要写入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%writefile data/underwater_reduced_label.yaml</span><br><span class="line"># Please insure that your custom_dataset are put in same parent dir with YOLOv6_DIR</span><br><span class="line">train: &#x27;reduced_label_yolov6/images/train&#x27; # train images</span><br><span class="line">val: &#x27;reduced_label_yolov6/images/valid&#x27; # val images</span><br><span class="line"></span><br><span class="line"># whether it is coco dataset, only coco dataset should be set to True.</span><br><span class="line">is_coco: False</span><br><span class="line"># Classes</span><br><span class="line">nc: 4  # number of classes</span><br><span class="line">names: [</span><br><span class="line">    &#x27;animal&#x27;,</span><br><span class="line">    &#x27;plant&#x27;,</span><br><span class="line">    &#x27;rov&#x27;,</span><br><span class="line">    &#x27;trash&#x27;</span><br><span class="line">]  # class names</span><br></pre></td></tr></table></figure>



<p>数据集的类别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class_names = [</span><br><span class="line">    &#x27;animal&#x27;,</span><br><span class="line">    &#x27;plant&#x27;,</span><br><span class="line">    &#x27;rov&#x27;,</span><br><span class="line">    &#x27;trash&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>绘制图片框框的颜色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">colors = np.random.uniform(0, 255, size=(len(class_names), 3))</span><br></pre></td></tr></table></figure>



<p>转换数据集中的边界框，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Function to convert bounding boxes in YOLO format to xmin, ymin, xmax, ymax.</span><br><span class="line">def yolo2bbox(bboxes):</span><br><span class="line">    xmin, ymin = bboxes[0]-bboxes[2]/2, bboxes[1]-bboxes[3]/2</span><br><span class="line">    xmax, ymax = bboxes[0]+bboxes[2]/2, bboxes[1]+bboxes[3]/2</span><br><span class="line">    return xmin, ymin, xmax, ymax</span><br></pre></td></tr></table></figure>



<p>接下来两段代码是绘制边界框的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def plot_box(image, bboxes, labels):</span><br><span class="line">    # Need the image height and width to denormalize</span><br><span class="line">    # the bounding box coordinates</span><br><span class="line">    height, width, _ = image.shape</span><br><span class="line">    lw = max(round(sum(image.shape) / 2 * 0.003), 2)  # Line width.</span><br><span class="line">    tf = max(lw - 1, 1) # Font thickness.</span><br><span class="line">    for box_num, box in enumerate(bboxes):</span><br><span class="line">        x1, y1, x2, y2 = yolo2bbox(box)</span><br><span class="line">        # denormalize the coordinates</span><br><span class="line">        xmin = int(x1*width)</span><br><span class="line">        ymin = int(y1*height)</span><br><span class="line">        xmax = int(x2*width)</span><br><span class="line">        ymax = int(y2*height)</span><br><span class="line"></span><br><span class="line">        p1, p2 = (int(xmin), int(ymin)), (int(xmax), int(ymax))</span><br><span class="line"></span><br><span class="line">        class_name = class_names[int(labels[box_num])]</span><br><span class="line"></span><br><span class="line">        color=colors[class_names.index(class_name)]</span><br><span class="line"></span><br><span class="line">        cv2.rectangle(</span><br><span class="line">            image,</span><br><span class="line">            p1, p2,</span><br><span class="line">            color=color,</span><br><span class="line">            thickness=lw,</span><br><span class="line">            lineType=cv2.LINE_AA</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        # For filled rectangle.</span><br><span class="line">        w, h = cv2.getTextSize(</span><br><span class="line">            class_name,</span><br><span class="line">            0,</span><br><span class="line">            fontScale=lw / 3,</span><br><span class="line">            thickness=tf</span><br><span class="line">        )[0]</span><br><span class="line"></span><br><span class="line">        outside = p1[1] - h &gt;= 3</span><br><span class="line">        p2 = p1[0] + w, p1[1] - h - 3 if outside else p1[1] + h + 3</span><br><span class="line"></span><br><span class="line">        cv2.rectangle(</span><br><span class="line">            image,</span><br><span class="line">            p1, p2,</span><br><span class="line">            color=color,</span><br><span class="line">            thickness=-1,</span><br><span class="line">            lineType=cv2.LINE_AA</span><br><span class="line">        )</span><br><span class="line">        cv2.putText(</span><br><span class="line">            image,</span><br><span class="line">            class_name,</span><br><span class="line">            (p1[0], p1[1] - 5 if outside else p1[1] + h + 2),</span><br><span class="line">            cv2.FONT_HERSHEY_SIMPLEX,</span><br><span class="line">            fontScale=lw/3.5,</span><br><span class="line">            color=(255, 255, 255),</span><br><span class="line">            thickness=tf,</span><br><span class="line">            lineType=cv2.LINE_AA</span><br><span class="line">        )</span><br><span class="line">    return image</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Function to plot images with the bounding boxes.</span><br><span class="line">def plot(image_path, label_path, num_samples):</span><br><span class="line">    all_training_images = glob.glob(image_path+&#x27;/*&#x27;)</span><br><span class="line">    all_training_labels = glob.glob(label_path+&#x27;/*&#x27;)</span><br><span class="line">    all_training_images.sort()</span><br><span class="line">    all_training_labels.sort()</span><br><span class="line"></span><br><span class="line">    temp = list(zip(all_training_images, all_training_labels))</span><br><span class="line">    random.shuffle(temp)</span><br><span class="line">    all_training_images, all_training_labels = zip(*temp)</span><br><span class="line">    all_training_images, all_training_labels = list(all_training_images), list(all_training_labels)</span><br><span class="line"></span><br><span class="line">    num_images = len(all_training_images)</span><br><span class="line"></span><br><span class="line">    if num_samples == -1:</span><br><span class="line">        num_samples = num_images</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(15, 12))</span><br><span class="line">    for i in range(num_samples):</span><br><span class="line">        image_name = all_training_images[i].split(os.path.sep)[-1]</span><br><span class="line">        image = cv2.imread(all_training_images[i])</span><br><span class="line">        with open(all_training_labels[i], &#x27;r&#x27;) as f:</span><br><span class="line">            bboxes = []</span><br><span class="line">            labels = []</span><br><span class="line">            label_lines = f.readlines()</span><br><span class="line">            for label_line in label_lines:</span><br><span class="line">                label, x_c, y_c, w, h = label_line.split(&#x27; &#x27;)</span><br><span class="line">                x_c = float(x_c)</span><br><span class="line">                y_c = float(y_c)</span><br><span class="line">                w = float(w)</span><br><span class="line">                h = float(h)</span><br><span class="line">                bboxes.append([x_c, y_c, w, h])</span><br><span class="line">                labels.append(label)</span><br><span class="line">        result_image = plot_box(image, bboxes, labels)</span><br><span class="line">        plt.subplot(2, 2, i+1) # Visualize 2x2 grid of images.</span><br><span class="line">        plt.imshow(image[:, :, ::-1])</span><br><span class="line">        plt.axis(&#x27;off&#x27;)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<p>随机挑4张图片展示一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plot(</span><br><span class="line">    &#x27;reduced_label_yolov6/images/train/&#x27;,</span><br><span class="line">    &#x27;reduced_label_yolov6/labels/train/&#x27;,</span><br><span class="line">    num_samples=4 # A positive number &gt; 0 or -1 to visualize all images.</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622015238395.png" alt="image-20230622015238395"></p>
<p>这个应该是权重的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.makedirs(&#x27;weights&#x27;, exist_ok=True)</span><br></pre></td></tr></table></figure>



<p>YOLOv6仓库权重的下载。注意：这个是于2023-6-22的YOLOv6仓库下载的最新权重，0.4.0版本，在运行这段代码前，请去仓库看一下权重文件是否更新，如果更新，请将链接更换一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Comment / Uncomment the following lines to download the corresponding weights.</span><br><span class="line">!wget https://github.com/meituan/YOLOv6/releases/download/0.4.0/yolov6n.pt -O weights/yolov6n.pt</span><br><span class="line"></span><br><span class="line">!wget https://github.com/meituan/YOLOv6/releases/download/0.4.0/yolov6s.pt -O weights/yolov6s.pt</span><br><span class="line"></span><br><span class="line">!wget https://github.com/meituan/YOLOv6/releases/download/0.4.0/yolov6l.pt -O weights/yolov6l.pt</span><br></pre></td></tr></table></figure>

<p>OK，万事大吉，可以开始训练模型了。</p>
<h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>训练模型需要这个代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Train YOLOv6n model.</span><br><span class="line">!python tools/train.py \</span><br><span class="line">--epochs 25 \</span><br><span class="line">--batch-size 32 \</span><br><span class="line">--conf configs/yolov6n_finetune.py \</span><br><span class="line">--data data/underwater_reduced_label.yaml \</span><br><span class="line">--write_trainbatch_tb \</span><br><span class="line">--device 0 \</span><br><span class="line">--eval-interval 1 \</span><br><span class="line">--img-size 640 \</span><br><span class="line">--name v6n_32b_640img_100e_reducedlabel</span><br><span class="line"></span><br><span class="line">##############################################################</span><br><span class="line"># Train YOLOv6s model.</span><br><span class="line"># !python tools/train.py \</span><br><span class="line"># --epochs 100 \</span><br><span class="line"># --batch-size 32 \</span><br><span class="line"># --conf configs/yolov6s_finetune.py \</span><br><span class="line"># --data data/underwater_reduced_label.yaml \</span><br><span class="line"># --write_trainbatch_tb \</span><br><span class="line"># --device 0 \</span><br><span class="line"># --eval-interval 1 \</span><br><span class="line"># --img-size 640 \</span><br><span class="line"># --name v6s_32b_640img_100e_reducedlabel</span><br><span class="line"></span><br><span class="line">##############################################################</span><br><span class="line"># Train YOLOv6l model.</span><br><span class="line"># !python tools/train.py \</span><br><span class="line"># --epochs 100 \</span><br><span class="line"># --batch-size 32 \</span><br><span class="line"># --conf configs/yolov6l_finetune.py \</span><br><span class="line"># --data data/underwater_reduced_label.yaml \</span><br><span class="line"># --write_trainbatch_tb \</span><br><span class="line"># --device 0 \</span><br><span class="line"># --eval-interval 1 \</span><br><span class="line"># --img-size 640 \</span><br><span class="line"># --name v6l_32b_640img_100e_reducedlabel</span><br></pre></td></tr></table></figure>

<p>训练参数</p>
<ul>
<li><code>--epochs</code>：要训练的时期数。</li>
<li><code>--batch-size</code>：一批数据中的训练样本数。</li>
<li><code>--conf</code>：要使用的模型配置。我们正在使用 这里，它已经随 YOLOv6 存储库一起提供，用于微调目的。<code>yolov6n_finetune.py</code></li>
<li><code>--data</code>：数据集 YAML 文件。</li>
<li><code>--write_trainbatch_tb</code>：这是一个布尔参数，表示我们要将日志写入 TensorBoard。</li>
<li><code>--device</code>：这将占用 GPU 设备 ID。当我们运行多 GPU 训练时，该值为 0，1（逗号后没有空格）。</li>
<li><code>--eval-interval</code>：运行评估的周期数。我们在每个纪元之后运行评估。<code>pycocotools</code></li>
<li><code>--img-size</code>：用于训练的图像大小。</li>
<li><code>--name</code>：项目目录名称。给出一个合适的名称将有助于轻松区分训练实验。</li>
</ul>
<p>我这里训练的时期数是25，训练了一个半小时</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622020031892.png" alt="image-20230622020031892"></p>
<p>这是我训练一个时期的效果，刚开始可以先将时期数设为1，跑通一遍试试手。</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230621233843848.png" alt="image-20230621233843848"></p>
<p>这是25个时期的效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622023514321.png" alt="image-20230622023514321"></p>
<p>可以看出lr,iou_loss,cls_loss还是降低不少呢</p>
<p>时期设置到100会训练的更好，我害怕时间太久，谷歌硬盘不保存，所以我就训练了25个时期，官方说是可以一次运行12个小时，所以100个时期应该也没问题。</p>
<p>看到这一行了吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--device 0 \</span><br></pre></td></tr></table></figure>

<p>还记得这张图片吧</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622023057178.png" alt="image-20230622023057178"></p>
<p>它的输出信息是0，所以我们这里填0 ，如果你有两块GPU，那么你可以这样填</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--device 0,1 \</span><br></pre></td></tr></table></figure>



<p>注意了！</p>
<p>如果你第一遍没有跑通，或者第一遍跑通了，或者因为报错调试着跑了好几遍，那么你的&#x2F;content&#x2F;drive&#x2F;MyDrive&#x2F;YOLOv6&#x2F;runs&#x2F;train文件夹中将会多出很多v6n_32b_640img_100e_reducedlabel文件，比如v6n_32b_640img_100e_reducedlabel，v6n_32b_640img_100e_reducedlabel1，v6n_32b_640img_100e_reducedlabel2，v6n_32b_640img_100e_reducedlabel3，等等</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622020420427.png" alt="image-20230622020420427"></p>
<p>我这里就剩一个v6n_32b_640img_100e_reducedlabel，其他的我已经删过了</p>
<p>如果你第一次没有跑通，会生成v6n_32b_640img_100e_reducedlabel文件夹，也许你在v6n_32b_640img_100e_reducedlabel5中跑通了模型（第五次跑）。这时候如果你想接着继续运行下面的代码，将会报错。因为下面的代码是读取的v6n_32b_640img_100e_reducedlabel这个文件夹里的文件（根据下一条代码的配置），v6n_32b_640img_100e_reducedlabel5里面有正确的文件，但是它读取不到，这时候需要你手动调整一下文件名了（或者改一下下一条代码的配置）。</p>
<p>比如删除掉没有跑通的模型的文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">！rm -rf /content/drive/MyDrive/YOLOv6/runs/train/v6n_32b_640img_100e_reducedlabel</span><br></pre></td></tr></table></figure>

<p>然后将你正确的模型文件的文件夹重命名为v6n_32b_640img_100e_reducedlabel</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622020942315.png" alt="image-20230622020942315"></p>
<p>你需要保证你的顺利跑通的模型在名为v6n_32b_640img_100e_reducedlabel的文件夹下。</p>
<p>然后你就可以运行下面的代码了。</p>
<p>这是你调best_weights参数的代码，我上面说的是一种方法，但更好的应该是也在这里面调整，将你顺利跑通的模型放在这里面就可以了，这样你可以保存多个模型了。如果你跑好的模型是v6n_32b_640img_100e_reducedlabel5，就需要在下面的v6n_32b_640img_100e_reducedlabel后面加个5就ok了，这样可以指定生成的模型了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result_dir = os.path.join(</span><br><span class="line">    &#x27;runs&#x27;, &#x27;train&#x27;, &#x27;v6n_32b_640img_100e_reducedlabel&#x27;</span><br><span class="line">)</span><br><span class="line">best_weights = os.path.join(result_dir, &#x27;weights&#x27;, &#x27;best_ckpt.pt&#x27;)</span><br></pre></td></tr></table></figure>



<p>接下来是在验证图形上进行推理了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Run the inference on the validation images.</span><br><span class="line">!python tools/infer.py \</span><br><span class="line">--weights &#123;best_weights&#125; \</span><br><span class="line">--yaml data/underwater_reduced_label.yaml \</span><br><span class="line">--source reduced_label_yolov6/images/valid/ \</span><br><span class="line">--name v6n_infer_valid__images</span><br></pre></td></tr></table></figure>



<p>推理好的图片将会放在这里</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622021741462.png" alt="image-20230622021741462"></p>
<p>定义展示图片的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def visualize(res_dir):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Shows a 2x2 of images.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    plt.figure(figsize=(15, 12))</span><br><span class="line">    all_images = glob.glob(os.path.join(res_dir, &#x27;*&#x27;))</span><br><span class="line">    for i, image_path in enumerate(all_images):</span><br><span class="line">        if i == 4:</span><br><span class="line">            break</span><br><span class="line">        image = cv2.imread(image_path)</span><br><span class="line">        plt.subplot(2, 2, i+1)</span><br><span class="line">        plt.imshow(image[:, :, ::-1])</span><br><span class="line">        plt.axis(&#x27;off&#x27;)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<p>随机出四张图片看看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">visualize(&#x27;runs/inference/v6n_infer_valid__images/&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230622021854999.png" alt="image-20230622021854999"></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>我的代码所在的仓库链接<a href="https://github.com/crwhsh/YOLOv6-Underwater_Trash_Detection">crwhsh&#x2F;YOLOv6-Underwater_Trash_Detection (github.com)</a><br>博客原文链接<a href="https://www.onehu.top/archives/9f6a770e.html">基于YOLOv6-水下垃圾检测 | one hu的博客</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>YOLOv6</tag>
        <tag>检测算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何购买域名</title>
    <url>/archives/fc393a6d.html</url>
    <content><![CDATA[<h1 id="如何购买域名"><a href="#如何购买域名" class="headerlink" title="如何购买域名"></a>如何购买域名</h1><p>我推荐使用namesilo来购买域名，选择.top后缀的域名仅需1.88$一年，可以在网上搜一下namesilo的优惠码，这样仅需1$就可以拥有一年的域名。</p>
<h2 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h2><p><a href="https://www.namesilo.com/">NameSilo</a></p>
<h2 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h2><p>打开网站点击sign-up</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603145857944.png" alt="image-20230603145857944"></p>
<p>填写用户名，邮箱，密码等信息（注意：密码格式要求，大写加小写加数字加特殊符号）</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603150045060.png" alt="image-20230603150045060"></p>
<h2 id="选择域名"><a href="#选择域名" class="headerlink" title="选择域名"></a>选择域名</h2><p>注册好之后，输入你喜欢的域名，点击SEARCH DOMAIN</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603150610218.png" alt="image-20230603150610218"></p>
<p>一般情况下.top的后缀是最便宜的，点击Add</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603150720299.png" alt="image-20230603150720299"></p>
<h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><p>然后点击Checkout</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603150950458.png" alt="image-20230603150950458"></p>
<p>在网上可以找到优惠码比如（shannote）此时仅需1$即可购买，点击CHECKOUT</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603151123075.png" alt="image-20230603151123075"></p>
<p>然后会进入支付页面，选择支付宝支付</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603151321718.png" alt="image-20230603151321718"></p>
<p>然后支付</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>第一次支付时需要你填一些个人信息，随便填就行，汉字好像不太行，试着用字母填写，比如郑州填成zhengzhou</p>
<p>填写的信息大概是这个样子</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603151858578.png" alt="image-20230603151858578"></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>购买域名</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自己的博客</title>
    <url>/archives/99c36cb.html</url>
    <content><![CDATA[<h1 id="搭建自己的博客"><a href="#搭建自己的博客" class="headerlink" title="搭建自己的博客"></a>搭建自己的博客</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>使用hexo（框架）+butterfly（主题）+vercel（网站托管）搭建你自己的博客</p>
<h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>如果有自己的域名可以忽略这一步</p>
<p>购买域名的方法可以参考</p>
<p><a href="https://www.onehu.top/archives/fc393a6d.html">如何购买域名 | one hu的博客</a></p>
<p>也可以在网上搜索购买域名的方法。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>版本控制工具</p>
<h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>JaveScript 运行环境</p>
<h4 id="npm-cnpm-yarn"><a href="#npm-cnpm-yarn" class="headerlink" title="npm cnpm yarn"></a>npm cnpm yarn</h4><p>包管理工具</p>
<h2 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h2><p>我搭建博客的过程中主要参考B站UP主卷二兔的教程</p>
<p>教程链接</p>
<p><a href="https://www.bilibili.com/video/BV1aV411p7Bc/?spm_id_from=333.788&vd_source=38b08662f4784c5a2c4492b4f2276a5b">使用Hexo搭建个人博客手摸手教学(1)|前言_哔哩哔哩_bilibili</a></p>
<p>他的教程十分详细，推荐去看一下。我的教程相对来说是一个最基础的入门，更详细的还是推荐看卷二兔的教程，和Butterful的官方文档</p>
<p>卷二兔的教程是将网站部署到GitHub上，我做出的改变是部署到了vercel上面</p>
<p>Butterfly的官方地址</p>
<p><a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>在终端中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure>

<p>-g是在全局安装</p>
<p>接着输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>

<p>来判断是否安装成功</p>
<p>如果出现这个页面，说明安装成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603155145671.png" alt="image-20230603155145671"></p>
<p>新建一个文件夹比如 我的博客 然后在这个文件夹里面再新建一个文件夹比如 myblog（不要担心出错，出错了大不了把文件夹删除，重新来一遍就好了）</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603160520301.png" alt="image-20230603160520301"></p>
<p>然后在空白处右键，选择在终端中打开</p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>

<p>这样就安装好了</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603161004728.png" alt="image-20230603161004728"></p>
<p>进入myblog文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd myblog</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>这样依赖就安装好了</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603161146823.png" alt="image-20230603161146823"></p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>会给你一个本地连接<a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603161405570.png" alt="image-20230603161405570"></p>
<p>这样页面就是最基础的页面了。</p>
<h3 id="发布博客到GitHub"><a href="#发布博客到GitHub" class="headerlink" title="发布博客到GitHub"></a>发布博客到GitHub</h3><p>进入GitHub<a href="https://github.com/%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E8%B4%A6%E6%88%B7%E5%85%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B4%A6%E6%88%B7">https://github.com/，如果没有账户先创建一个账户</a></p>
<h4 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h4><p>点击头像然后点击 Your repositiones</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603162524571.png" alt="image-20230603162524571"></p>
<p>然后点击New</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603162633797.png" alt="image-20230603162633797"></p>
<p>为你的仓库起一个名字 比如 myblog ，选择 Public 点击Create repository</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603162737664.png"></p>
<p>这样你的仓库就建好了</p>
<h4 id="配置git信息"><a href="#配置git信息" class="headerlink" title="配置git信息"></a>配置git信息</h4><p>打开终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名，比如我的是crwhsh&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>通过编译器打开myblog文件夹</p>
<p>找到_config.yml 文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603163525276.png" alt="image-20230603163525276"></p>
<p>翻到最下面有一个deploy配置信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603163716831.png" alt="image-20230603163716831"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: &#x27;你的GitHub地址&#x27;</span><br><span class="line">  branch: &#x27;main&#x27;</span><br></pre></td></tr></table></figure>

<p>将deply修改成这个样子，注意repo是你自己的GitHub地址，从刚刚创建的仓库复制一下，粘贴到repo里面</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603164015964.png" alt="image-20230603164015964"></p>
<p>保存配置信息。</p>
<p>在终端中打开myblog文件夹</p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603164432685.png" alt="image-20230603164432685"></p>
<p>这样就安装成功了</p>
<h4 id="上传GitHub仓库"><a href="#上传GitHub仓库" class="headerlink" title="上传GitHub仓库"></a>上传GitHub仓库</h4><p>清理缓存命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>生成文件命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>上传GitHub命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>本地预览命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>一般上传GitHub要清理一下缓存，生成一下文件，然后再上传。</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603164830151.png" alt="image-20230603164830151"></p>
<p>这样就上传成功了</p>
<p>查看我们的GitHub，此时文件以及上传上去了</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603164914175.png" alt="image-20230603164914175"></p>
<h3 id="将博客托管到vercel"><a href="#将博客托管到vercel" class="headerlink" title="将博客托管到vercel"></a>将博客托管到vercel</h3><p>打开vercel官网<a href="https://vercel.com/">https://vercel.com/</a></p>
<p>使用GitHub登入</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603165227245.png" alt="image-20230603165227245"></p>
<p>添加一个新的Project</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603165328450.png" alt="image-20230603165328450"></p>
<p>这里可以看到我们刚才的仓库myblog，点击import导入</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603165400012.png" alt="image-20230603165400012"></p>
<p>点击Deploy</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603165455609.png" alt="image-20230603165455609"></p>
<p>创建完成后添加绑定的域名</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603165539531.png" alt="image-20230603165539531"></p>
<p>输入你创建的域名，添加(注意要加上www.否则可能无法正常访问)</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170034156.png" alt="image-20230603170034156"></p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603165648635.png" alt="image-20230603165648635"></p>
<p>此时会报错无效配置，我们选择有前缀www.这个域名，点击or Nameservers 然后点击Enable Vercel DNS</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170200639.png" alt="image-20230603170200639"></p>
<p>此时vercel会给出他们的Name server</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170329682.png" alt="image-20230603170329682"></p>
<p>此时打开<a href="https://www.namesilo.com/">https://www.namesilo.com/</a></p>
<p>点击 My Account</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170508946.png" alt="image-20230603170508946"></p>
<p>点击Mange</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170541662.png" alt="image-20230603170541662"></p>
<p>选择你的域名点击Change Nameservers</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170618637.png" alt="image-20230603170618637"></p>
<p>将原本的删除，修改成vercel提供的Nameserver</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170727598.png" alt="image-20230603170727598"></p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170839243.png" alt="image-20230603170839243"></p>
<p>然后点击提交，等待一段时间，在vercel里面点击刷新</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603170943421.png" alt="image-20230603170943421"></p>
<p>等待一段时间大概10分钟</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603171556644.png" alt="image-20230603171556644"></p>
<p>你会发现全都变蓝了，说明配置成功了，这时候我们试着访问一下我们的域名</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603171752409.png" alt="image-20230603171752409"></p>
<p>正常访问成功！以后可以通过域名来访问我们的博客了！</p>
<p>以后我们只需在本地修改好文件，然后上传到GitHub，vercel就会自动更新你的更改，十分方面。</p>
<h3 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h3><p>对博客美化就是对配置文件的改改改，要注意缩进</p>
<p>比如我更改一些</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603172639536.png" alt="image-20230603172639536"></p>
<p>再使用命令运行，打开网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603172754410.png" alt="image-20230603172754410"></p>
<p>一些东西就改变了</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603172821042.png" alt="image-20230603172821042"></p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603172837530.png" alt="image-20230603172837530"></p>
<h4 id="需要更改的一些配置"><a href="#需要更改的一些配置" class="headerlink" title="需要更改的一些配置"></a>需要更改的一些配置</h4><p>需要将这个url改成自己的域名网站</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603173148606.png" alt="image-20230603173148606"></p>
<h4 id="一些指令"><a href="#一些指令" class="headerlink" title="一些指令"></a>一些指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;文章名字&quot;</span><br></pre></td></tr></table></figure>

<p>可以快速创建一个文章</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603173531563.png" alt="image-20230603173531563"></p>
<h4 id="Butterfly主题安装"><a href="#Butterfly主题安装" class="headerlink" title="Butterfly主题安装"></a>Butterfly主题安装</h4><p>Butterfly官网文档教程<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p>
<p>首先再myblog目录下安装（我这里使用的是nmp安装）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure>

<p>这样就安装好了</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603174031665.png" alt="image-20230603174031665"></p>
<p>在_config.yml文件中ctrl+f搜索theme（修改配置经常需要搜索，请熟练使用ctrl+f），修改成butterfly</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603175259475.png" alt="image-20230603175259475"></p>
<p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603174410261.png" alt="image-20230603174410261"></p>
<p>修改配置文件后记得ctrl+s进行保存</p>
<p>此时我们运行一下看看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  #清理一下缓存</span><br><span class="line">hexo g      #重新生成一下</span><br><span class="line">hexo s      #运行本地服务器</span><br></pre></td></tr></table></figure>

<p>现在我们的博客成了这个样子</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603175506372.png" alt="image-20230603175506372"></p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603175522404.png" alt="image-20230603175522404"></p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603175533375.png" alt="image-20230603175533375"></p>
<p>此时我们可以运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>将本地修改的推送到GitHub上，然后vercel自动托管</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603175829579.png" alt="image-20230603175829579"></p>
<p>此时我们打开我们的域名</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603175944801.png" alt="image-20230603175944801"></p>
<p>此时访问我们的域名也可以看到变化了。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这篇文章给想要搭建个博客的同学引个头，如果想让自己的博客功能更加完善和美观，希望你去看Butterfly的官方文档，如果你看完了我的文章，你可以从这里开始看<a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔(二) 主題頁面 | Butterfly</a></p>
<p>或者跟着卷二兔的这个视频开始看<a href="https://www.bilibili.com/video/BV1Fb4y1r7ja/?spm_id_from=333.788&vd_source=38b08662f4784c5a2c4492b4f2276a5b">使用Hexo搭建个人博客手摸手教学(8)|butterfly主题页面配置_哔哩哔哩_bilibili</a></p>
<p>看完卷二兔的三个主题配置视频，你应该就会美化自己的博客了</p>
<p><img src="https://cdn.jsdelivr.net/gh/crwhsh/img/img/image-20230603180525820.png" alt="image-20230603180525820"></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>搭建网站</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
